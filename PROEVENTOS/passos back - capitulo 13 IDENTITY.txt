1 - instalar o identity na proeventos.domain
Microsoft.AspNetCore.Identity.EntityFrameworkCore 5.0.11

2 - criar as pastas Identity e Enum em Domain, e as classes dentro dessas pastas

3 - referenciar usuario nas classes evento

4 - na classe User foi feita a referência de IdentityUser<int>
e em Role foi feita a referência de IdentityRole<int>
e em UserRole foi feita a referência de IdentityUserRole<int>
*o int referencia ao primary key como int, o padrão do entity é GUID primary key

5 - incluir a referência do identity dentro do ProEventos.Persistence
    <PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore" Version="5.0.11" />

6 - ALERTA DE BUG
Necessário deixar as referências de entity e identity na mesma versão, em Persistence e Domain

7 - trocar o ProEventosContext para IdentityDbContext, e tirar o DBContext
**Se não forem passados parametros ao identityDbContext, as tabelas serão criadas com base em IdentityUser, IdentityRole
**Com os parametros passados, são criadas com base em diversos informações que ficam como padrão. Coladas na context "EXCETO IdentityUserRole que ficará UserRole"
IdentityDbContext<TUser, TRole, TKey, IdentityUserClaim<TKey>, UserRole, IdentityUserLogin<TKey>, IdentityRoleClaim<TKey>, IdentityUserToken<TKey>>

8 - incluir o código abaixo em ProEventosContext -> OnModelCreating()
base.OnModelCreating(modelBuilder);

9 - apagar o banco de dados anterior e gerar uma nova migration. Rodar comando dentro de proeventos.api
dotnet ef migrations add Adicionando-Identity -p ..\Proeventos.Persistence -s ProEventos.API
dotnet ef database update -s ProEventos.API

10 - Criar interface, persist e controller de usuario
**SE ATENTAR AO USERPERSIST QUE ESTÁ IMPLEMENTANDO GERAL E INTERFACE

11 - INSTALAR O Microsoft.AspNetCore.Identity EM proeventos.application

12 - criar a interface e service do token

13 - instalar os seguintes pacotes que estão sendo usados no service de token
 System.IdentityModel.Tokens.Jwt - v 6.14
 Microsoft.IdentityModel.Tokens - v 6.14
 
14 - adicionar os mappers de interface no startup do projeto
IUserService
IUserPersist

15 - adicionar o AddJsonOptions para o enumConverter e o AddNewtonsoftJson já estava configurado, para evitar chamadas em looping
enum adicionado devido as classes de enum. Caso não seja implementado, essas classes retornarão o index ao invés do valor

16 - adicionar o AddIdentityCore ao startup
*MUITO IMPORTANTE INCLUIR O AddDefaultTokenProviders
Obrigatório pois em UserService o GeneratePasswordResetTokenAsync é gerado por essa classe

17 - adicionar o AddAuthentication ao startup
*instalar  
Microsoft.AspNetCore.Authentication.JwtBearer no ProEventos.API - v 5.0.2
Microsoft.AspNetCore.Identity.EntityFrameworkCore - v 5.0.2

**é o mesmo que está no token service pois é a chave de criptografia e descriptografia

18 - criar UserController
dotnet ef migrations add ajustando-null-de-usuario -p ..\Proeventos.Persistence -s ProEventos.API

19 - criar pasta Extensions -> ClaimPrincipalExtencions dentro de ProEventos.API
*a classe deve herdar de Claim (this ClaimsPrincipal user)

20 - Alterar todas as classes de CRUD para receber o userid e incluir authorize na controler

21 - no startup -> AddSwaggerGen adicionar o AddSecurityDefinition